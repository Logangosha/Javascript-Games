JavaScript Functions
====================
1. .getElementbyId(id)

	returns element object associated with the id parameter	

2. .querySelectorAll(selectors)

	returns a static NodeList representing a list of the documents elements that match the specified group of selectors	

3. .addEventListener(typeOfEvent, listenerFunction)

	function that will be called whenever the specified event is delivered to the target 
	common targets include Element, Document, and window   	

4. .innerHTML

	gets or sets the HTML contained within the element.

5. Math.random()

	returns a floating-point, pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1)

6. Math.floor()

	returns the largest integer less than or wqual to a given number 
	ex: 5 => 5; 6.99999 => 6; 5.05 => 5; -5.99 => 6;

7. .sort()

	sorts array in accending order

8. .querySelector(selector)

	returns the first Element within the document that matches the specified selector, or group of selectors.
	If no matches are found, null is returned.

9. .createElement(tagName)

	creates the HTML element specified by tagName
	ex: .createElement('div')

10. .setAttribute(name, value)

	Sets the value of an attribute on the specified element.    

11. .appendChild(new child)

	adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position
	Node.cloneNode() can be used if you wish to make a copy of the node before appending it 

12. getAttribute(attribute)

	returns the value of a specified attribute on the element.

13. parseInt(string, radix)

	parses a string argument and returns an integer of the specified radix

14. .push(x)

	adds one or more elements to the end of an array and returns the new length of the array.

15. setTimeout(function, delay)

	sets a timer which executes a function or specified piece of code once the timer expires.

16. alert(message)

	instructs the browser to display a dialog with an optional message, and to wait until the user dismisses the dialog.	

17. .removeEventListener(type, listener);

	removes an event listener previously registered with EventTarget.addEventListener() from the target. 
	The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; 

18. .forEach()

	executes a provided function once for each array element.
	
	// Arrow function
	forEach((element) => { /* ... */ })
	forEach((element, index) => { /* ... */ })
	forEach((element, index, array) => { /* ... */ })

	// Callback function
	forEach(callbackFn)
	forEach(callbackFn, thisArg)

	// Inline callback function
	forEach(function(element) { /* ... */ })
	forEach(function(element, index) { /* ... */ })
	forEach(function(element, index, array){ /* ... */ })
	forEach(function(element, index, array) { /* ... */ }, thisArg)

19. .classList

	read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.
	Using classList is a convenient alternative to accessing an element's list of classes as a space-delimited string via element.className.

20. .classList.Add(class)

	adds the given tokens to the list, omitting any that are already present. 

21. .classList.remove(class)

	 removes the specified tokens from the list.

22. .classList.contains(class)

	 returns a boolean value â€” true if the underlying list contains the given token, otherwise false.

23. setInterval(function, delay)

	 repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
	 This method returns an interval ID which uniquely identifies the interval, so you can remove it later by calling clearInterval().

24. clearInterval(interval)
	
	cancels a timed, repeating action which was previously established by a call to setInterval().

25. class

	class Rectangle {
	constructor(height, width) 
	 {
    	   this.height = height;
           this.width = width;
       	 }
	}

	====
	NAMED VS UNAMED
	====
	// unnamed
	let Rectangle = class {
	  constructor(height, width) {
	    this.height = height;
	    this.width = width;
	  }
	};
	console.log(Rectangle.name);
	// output: "Rectangle"

	// named
	let Rectangle = class Rectangle2 {
	  constructor(height, width) {
	    this.height = height;
	    this.width = width;
	  }
	};
	console.log(Rectangle.name);
	// output: "Rectangle2"
	
	// structure
	class Rectangle {

	height;	
	width;

  	constructor(height, width) {
    	this.height = height;
    	this.width = width;
  	}
  	// Getter
  	get area() {
   	 return this.calcArea();
 	 }
  	// Method
  	calcArea() {
   	 return this.height * this.width;
  	}
	}

const square = new Rectangle(10, 10);

console.log(square.area); // 100

26. .style.left
	
	The left CSS property participates in specifying the horizontal position of a positioned element.

27. .style.right

	The right CSS property participates in specifying the horizontal position of a positioned element. 

28. .style.top

	The top CSS property participates in setting the vertical position of a positioned element.	

29. .style.bottom

	The bottom CSS property participates in setting the vertical position of a positioned element.

30. .splice(start, deleteCount, itemAdd1, itemAdd2)

	changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
	returns an array of values deleted

31. .indexOf(searchElement, startIndex)

	returns the first index at which a given element can be found in the array, or -1 if it is not present.

32. parent.removeChild(child)

	 removes a child node from the DOM and returns the removed node.

34. arrow function () =>

	Basic syntax
	One param. With simple expression return is not needed:

	param => expression
	Copy to Clipboard
	Multiple params require parentheses. With simple expression return is not needed:

	(param1, paramN) => expression
	Copy to Clipboard
	Multiline statements require body braces and return:
	
	param => {
	  let a = 1;
	  return a + param;
	}
	Copy to Clipboard
	Multiple params require parentheses. Multiline statements require body braces and return:
	
	(param1, paramN) => {
	   let a = 1;
	   return a + param1 + paramN;
	}
	Copy to Clipboard
	Advanced syntax
	To return an object literal expression requires parentheses around expression:

	params => ({foo: "a"}) // returning the object {foo: "a"}

35. .map(function) 

	creates a new array populated with the results of calling a provided function on every element in the calling array.

36. .filter(testFunction)

	 creates a new array with all elements that pass the test implemented by the provided function.

37. .some(testFunction)

	tests whether at least one element in the array passes the test implemented by the provided function. 
	It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.

38. .every(testfunction)

	tests whether all elements in the array pass the test implemented by the provided function. 
	It returns a Boolean value.

39. Array.from(iterable object)

	static method creates a new, shallow-copied Array instance from an array-like or iterable object.

40. Object.assign(target, source)

	copies all enumerable own properties from one or more source objects to a target object. 
	It returns the modified target object.

	example: 

	const target = { a: 1, b: 2 };
	const source = { b: 4, c: 5 };

	const returnedTarget = Object.assign(target, source);

	console.log(target);
	// expected output: Object { a: 1, b: 4, c: 5 }

	console.log(returnedTarget);
	// expected output: Object { a: 1, b: 4, c: 5 }

41. String.split(seporator, limit)

	divides a String into an ordered list of substrings, puts these substrings into an array, and returns the array.
	The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.

42. String.slice(start, end)

	returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. 
	The original array will not be modified.

43. String.indexOf(searchString, position) also applys to Array.prototype.indexOf(searchString, position)

	given one argument: a substring to search for, searches the entire calling string, and returns the index of the first occurrence of the specified substring. 
	Given a second argument: a number, the method returns the first occurrence of the specified substring at an index greater than or equal to the specified number.

44. .includes(x)

	determines whether an array includes a certain value among its entries, returning true or false as appropriate.

45. .shift()

	method removes the first element from an array and returns that removed element. This method changes the length of the array.

	example: 

	const array1 = [1, 2, 3];

	const firstElement = array1.shift();
	
	console.log(array1);
	// expected output: Array [2, 3]
	
	console.log(firstElement);
	// expected output: 1

46. .unshift(element0, element1, /* ... ,*/ elementN)

	adds one or more elements to the beginning of an array and returns the new length of the array.
	
	example

	const array1 = [1, 2, 3];

	console.log(array1.unshift(4, 5));
	// expected output: 5
	
	console.log(array1);
	// expected output: Array [4, 5, 1, 2, 3]

47. .fill(value, start, end)

	changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). 
	It returns the modified array

	const array1 = [1, 2, 3, 4];

	// fill with 0 from position 2 until position 4
	console.log(array1.fill(0, 2, 4));
	// expected output: [1, 2, 0, 0]
	
	// fill with 5 from position 1
	console.log(array1.fill(5, 1));
	// expected output: [1, 5, 5, 5]
	
	console.log(array1.fill(6));
	// expected output: [6, 6, 6, 6]


48. .find(function)

	returns the first element in the provided array that satisfies the provided testing function.
	If no values satisfy the testing function, undefined is returned.

49. .reverse()

	reverses an array in place. The first array element becomes the last, and the last array element becomes the first.

